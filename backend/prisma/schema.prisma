datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
    id              Int       @id @default(autoincrement())
    username        String    @unique
    email           String?   @unique
    image           String?
    password String
    createdAt       DateTime  @default(now())
    habits          Habit[]
    trackers        Tracker[]
    accounts      Account[]
}

model Session {
    id        String   @id
    sid       String   @unique
    data      String
    expiresAt DateTime
}

model Habit {
    id             Int      @id @default(autoincrement())
    name           String
    frequency      Int      @default(1)
    period         String   @default("day")
    weekdays       String?
    color          String?
    image          String?
    reminder       Boolean  @default(false)
    streakInterval Int      @default(86400) // 1 day
    createdAt      DateTime @default(now())

    // Relations
    user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId Int

    streaks Streak[]
    logs    Log[]
}

model Tracker {
    id       Int      @id @default(autoincrement())
    name     String
    color    String?
    image    String?
    reminder DateTime

    // Relations
    user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId Int

    logs Log[]
}

model Log {
    id        Int      @id @default(autoincrement())
    event     String
    createdAt DateTime @default(now())

    // Relations
    habit     Habit?   @relation(fields: [habitId], references: [id], onDelete: Cascade)
    habitId   Int?
    tracker   Tracker? @relation(fields: [trackerId], references: [id], onDelete: Cascade)
    trackerId Int?
}

model Streak {
    id         Int      @id @default(autoincrement())
    active     Boolean
    score      Int
    startedAt  DateTime
    finishedAt DateTime

    // Relations
    habit   Habit @relation(fields: [habitId], references: [id], onDelete: Cascade)
    habitId Int
}
